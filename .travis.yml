conditions: v1

dist: xenial
language: python
python:
- '3.7'
- '2.7'
- pypy3.5-6.0.0
- '3.6'
- '3.5'
- '3.4'
- pypy2.7-6.0.0
# This is broken on travis as of 2019/03/12
# - pypy

cache:
  pip: true
  directories:
  - $HOME/.cache/pre-commit
  - $HOME/.pre-commit
  - $HOME/Library/Caches/Homebrew

install:
- python -m pip.__main__ install cython tox

# build libyaml
- pushd /tmp
- |
    if [[ "$(uname -s)" != "Darwin" ]]
    then
      set -e
    fi
- git clone https://github.com/yaml/libyaml.git -b "${LIBYAML_VERSION}" libyaml
- cd libyaml
- ./bootstrap
- ./configure
- make
- make test-all
- sudo make install
- |
    if [[ "$(uname -s)" != "Darwin" ]]
    then
      set +e
    fi
- popd
# pre-populate virtualenv separately from the actual testing (script step):
- python -m tox.__main__ --notest

before_script:
- sudo ldconfig

script:
- python -m tox.__main__

.mixtures:
- &osx_python
  name: macOS 10.13 with xcode 10.1
  if: type IN (api, cron) OR tag IS present
  os: osx
  osx_image: xcode10.1
  language: generic
  before_install:
  - brew install zlib readline
  - brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/pyenv.rb || brew upgrade pyenv
  - &ensure_pyenv_preloaded eval "$(pyenv init -)"
  - &select_specific_python |
      if [[ ! "$TRAVIS_PYTHON_VERSION" =~ "dev" ]]
      then
        export TRAVIS_PYTHON_VERSION=$(\
          pyenv install --list | \
          grep -E '\s\s'"$TRAVIS_PYTHON_VERSION" | grep -vE 'dev|rc' | \
          tail -n 1 | tr -d '[:space:]'\
        )
      fi
  - &install_python |
      pyenv install --skip-existing --keep --verbose "$TRAVIS_PYTHON_VERSION" | \
      tee pyenv-install.log | tail -n 50
  - &switch_python pyenv shell "$TRAVIS_PYTHON_VERSION"
  - &python_version python --version
  after_failure:
  - cat pyenv-install.log
  before_script: []
  before_cache:
  - brew --cache
- &macos-job
  os: osx
  osx_image: xcode10.1
  language: generic
  cache:
    directories:
    - $HOME/Library/Caches/Homebrew
    - $PYTHON_INSTALLER_DIR_PATH
    - $GIT_INSTALLER_DIR_PATH
  before_install: &install-from-python_org
  - |
    function probe_url() {
      local py_ver="$1"
      [ $(curl -I --write-out '%{http_code}' --silent --output /dev/null "https://www.python.org/ftp/python/${py_ver}/python-${py_ver}-macosx10.6.pkg") == '200' ] && return 0
      return 1
    }
  - |
    function find_last_macos_py() {
    for py_ver in $*
    do
      >&2 echo Probing $py_ver
      probe_url $py_ver && >&2 echo "Found pkg: ${py_ver}" && echo $py_ver && return 0
    done
    >&2 echo Failed looking up macOS pkg for $*
    return 1
    }
  - export GIT_DMG_NAME="git-${GIT_VERSION}-intel-universal-mavericks.dmg"
  - export GIT_PKG_NAME="git-${GIT_VERSION}-intel-universal-mavericks.pkg"
  - export GIT_DMG_PATH="${GIT_INSTALLER_DIR_PATH}/${GIT_DMG_NAME}"
  - >
    stat "${GIT_DMG_PATH}" &>/dev/null || wget -O "${GIT_DMG_PATH}" "https://sourceforge.net/projects/git-osx-installer/files/${GIT_DMG_NAME}/download?use_mirror=autoselect"
  - stat "${GIT_DMG_PATH}" >/dev/null
  - sudo hdiutil attach ${GIT_DMG_PATH}
  - hdiutil info
  - >
    export GIT_INSTALLER_VOLUME=$(hdiutil info | tail -n1 | sed 's#^.*\(/Volumes.*\)#\1#')
  - >
    export GIT_INSTALLER_PATH="${GIT_INSTALLER_VOLUME}/${GIT_PKG_NAME}"
  - ls -alh "${GIT_INSTALLER_VOLUME}"
  - sudo installer -verboseR -dumplog -pkg "${GIT_INSTALLER_PATH}" -target /
  - sudo hdiutil detach "${GIT_INSTALLER_VOLUME}"
  - export PYTHON_VERSION_LONG_SUGGESTIONS=$(git ls-remote --sort -v:refname --tags git://github.com/python/cpython.git "${PYTHON_VERSION}*" "v${PYTHON_VERSION}*" | grep -v '\^{}$' | awk '{print$2}' | sed 's#^refs/tags/##;s#^v##' | grep -v '[abcepr]')
  - export PYTHON_VERSION_LONG=$(find_last_macos_py $PYTHON_VERSION_LONG_SUGGESTIONS)
  - export PYTHON_VERSION_SHORT=$(echo ${PYTHON_VERSION_LONG} | awk -F. '{print$1"."$2}')
  - echo "Selected version vars are:"
  - echo "PYTHON_VERSION=${PYTHON_VERSION}"
  - echo "PYTHON_VERSION_SHORT=${PYTHON_VERSION_SHORT}"
  - echo "PYTHON_VERSION_LONG=${PYTHON_VERSION_LONG}"
  - export PYTHON_INSTALL_PATH="/Library/Frameworks/Python.framework/Versions/${PYTHON_VERSION_SHORT}"
  - export PYTHON_INSTALL_EXE="${PYTHON_INSTALL_PATH}/bin/python${PYTHON_VERSION_SHORT}"
  - export PATH="${PYTHON_INSTALL_PATH}/bin:${PATH}"
  - export PYTHON_VENV_PATH="${HOME}/virtualenv/python${PYTHON_VERSION_SHORT}"
  - export PYTHON_INSTALLER_PATH="${PYTHON_INSTALLER_DIR_PATH}/python-${PYTHON_VERSION_LONG}.pkg"
  - echo "PYTHON_INSTALLER_PATH=${PYTHON_INSTALLER_PATH}"
  - env
  - >
    stat "${PYTHON_INSTALLER_PATH}" &>/dev/null || wget -O "${PYTHON_INSTALLER_PATH}" "https://www.python.org/ftp/python/${PYTHON_VERSION_LONG}/python-${PYTHON_VERSION_LONG}-macosx10.6.pkg"
  - stat "${PYTHON_INSTALLER_PATH}" >/dev/null
  - sudo installer -verboseR -dumplog -pkg "${PYTHON_INSTALLER_PATH}" -target /
  - ls "${PYTHON_INSTALL_PATH}/bin"
  - ls -lh "${PYTHON_INSTALL_EXE}"
  - stat "${PYTHON_INSTALL_EXE}"
  - /Applications/Python\ ${PYTHON_VERSION_SHORT}/Install\ Certificates.command || echo "No need to fix certificates"
  - curl https://bootstrap.pypa.io/get-pip.py | ${PYTHON_INSTALL_EXE}
  - >
    "${PYTHON_INSTALL_EXE}" -m pip install -U pip
  - >
    "${PYTHON_INSTALL_EXE}" -m pip install -U virtualenv
  - >
    "${PYTHON_INSTALL_EXE}" -m virtualenv "${PYTHON_VENV_PATH}"
  - . "${PYTHON_VENV_PATH}/bin/activate"
  - curl https://bootstrap.pypa.io/get-pip.py | python
  - python --version
  - pip --version
  before_script: []
  before_cache:
  - brew --cache

env:
  global:
    GIT_INSTALLER_DIR_PATH: ${HOME}/.git-installers
    GIT_VERSION: 2.20.1
    LIBYAML_VERSION: 0.2.2
    PYTHON_INSTALLER_DIR_PATH: ${HOME}/.python-installers
    TOXENV: python
jobs:
  fast_finish: true
  allow_failures:
  - os: osx
    env:
      TRAVIS_PYTHON_VERSION: '2.7'
  - os: osx
    env:
      TRAVIS_PYTHON_VERSION: &pypy3-osx-version pypy3.6-7.0.0
  include:
  - <<: *macos-job
    name: Python 3.7 under macOS 10.13 with xcode 10.1
    env:
      TRAVIS_PYTHON_VERSION: '3.7'
    python: '3.7'
  - <<: *macos-job
    name: Python 2.7 under macOS 10.13 with xcode 10.1
    env:
      TRAVIS_PYTHON_VERSION: '2.7'
    python: '2.7'
  - <<: *macos-job
    name: PyPy3.6 v7.0.0 under macOS 10.13 with xcode 10.1
    env:
      TRAVIS_PYTHON_VERSION: *pypy3-osx-version
    python: *pypy3-osx-version
  - <<: *macos-job
    name: Python 3.6 under macOS 10.13 with xcode 10.1
    env:
      TRAVIS_PYTHON_VERSION: '3.6'
    python: '3.6'
  - <<: *macos-job
    name: Python 3.5 under macOS 10.13 with xcode 10.1
    env:
      TRAVIS_PYTHON_VERSION: '3.5'
    python: '3.5'
  - <<: *macos-job
    name: Python 3.4 under macOS 10.13 with xcode 10.1
    env:
      TRAVIS_PYTHON_VERSION: '3.4'
    python: '3.4'


  # This placeholder can be extended to do actual upload of a dist to
  # PYPI, it will only appear if the current commit is tagged:
  - stage: Deploy to PYPI (placeholder)
    if: tag IS present
    install: []
    script: []
    deploy:
      provider: pypi
      skip-cleanup: true
      user: PLACEHOLDER
      password:
        secure: PLACEHOLDER
